var exportNode = require('./exportNode');
var importNode = require('./importNode');

function rewriteFile(p, f) {
    var replaces = [];

    var top = '';
    var bottom = '';
    var closureParameters = [];

    var unknownExps = f.getUnknownExportNodes();
    var singleExps = f.getSingleExportNodes();
    var fullExps = f.getFullExportNodes();

    var needsTwoExportVariables = (fullExps.length >= 1) && ((unknownExps.length >= 1) || (singleExps.length >= 1));

    var varExports = 'exports';
    var varModuleExports = p.options.varPrefix + 'moduleExports';

    if (needsTwoExportVariables) {
        top = 'var ' + varExports + ' = {}, ' + varModuleExports + ' = ' + varExports + ';';
        bottom = 'return ' + varModuleExports + ';';
    } else {
        top = 'var ' + varExports + ' = {};';
        bottom = 'return ' + varExports + ';';
        varModuleExports = varExports;
    }

    f.exportNodes.forEach(function (exp) {
        replaces.push({
            pos: exp.exportAst.start.pos,
            endpos: exp.exportAst.end.endpos,
            value: (exp.style === 1 /* ModuleExports */) ? varModuleExports : varExports
        });
    });

    f.importNodes.forEach(function (imp) {
        switch (imp.outputStyle) {
            case 0 /* SINGLE */:
                replaces.push({
                    pos: imp.importAst.start.pos,
                    endpos: imp.importAst.end.endpos,
                    beforeFile: '(',
                    file: imp.file,
                    afterFile: ')'
                });
                return;
            case 2 /* VAR_REFERENCE */:
                replaces.push({
                    pos: imp.importAst.start.pos,
                    endpos: imp.importAst.end.endpos,
                    value: imp.file ? imp.file.varName : imp.globalModule._varName
                });
                return;
            case 1 /* VAR_ASSIGN */:
            case 4 /* VAR_ASSIGN_AND_RENAME */:
                replaces.push({
                    pos: imp.importAst.start.pos,
                    endpos: imp.importAst.end.endpos,
                    beforeFile: '(' + imp.file.varName + ' = ',
                    file: imp.file,
                    afterFile: ')'
                });
                break;
        }

        switch (imp.outputStyle) {
            case 3 /* VAR_RENAME */:
                replaces.push({
                    pos: imp.ast.start.pos,
                    endpos: imp.ast.end.endpos,
                    value: ''
                });
            case 4 /* VAR_ASSIGN_AND_RENAME */:
                var impSimple = imp;
                impSimple.varAst.thedef.references.forEach(function (ref) {
                    replaces.push({
                        pos: ref.start.pos,
                        endpos: ref.end.endpos,
                        value: imp.file.varName
                    });
                });
        }
    });

    var childTopId = 0;
    f.structureChildren.forEach(function (other) {
        if (!other.defined) {
            replaces.push({
                pos: 0,
                endpos: 0,
                secundarySort: childTopId++,
                beforeFile: 'var ' + other.varName + ' = ',
                file: other,
                afterFile: ';\n'
            });
        }
    });

    replaces.sort(function (a, b) {
        if (a.pos === b.pos) {
            if (a.endpos === b.endpos) {
                return b.secundarySort - a.secundarySort;
            } else {
                return b.endpos - a.endpos;
            }
        } else {
            return b.pos - a.pos;
        }
    });

    f.rewriteData = {
        replaces: replaces,
        top: top,
        bottom: bottom,
        closureParameters: closureParameters
    };
}
exports.rewriteFile = rewriteFile;
