/// <reference path="../definitions/ref.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var file = require('./file');
var events = require('events');
var resolve = require('./resolve');
var order = require('./order');
var structure = require('./structure');
var rewrite = require('./rewrite');
var bundle = require('./bundle');
var importNode = require('./importNode');
var io = require('./io');
var Vinyl = require('vinyl');

var Project = (function (_super) {
    __extends(Project, _super);
    function Project(startFileName, ioHost, options) {
        if (typeof ioHost === "undefined") { ioHost = new io.NodeIO(); }
        if (typeof options === "undefined") { options = {}; }
        _super.call(this);
        this.files = [];
        this.orderFiles = [];
        this.failed = false;
        this.compiled = {};
        this._fileQueue = 0;

        this.io = ioHost;

        // Default options
        if (options.alwaysLoadConditional === undefined)
            options.alwaysLoadConditional = true;
        if (options.includeNode === undefined)
            options.includeNode = false;
        if (options.modulesDirectories === undefined)
            options.modulesDirectories = ['node_modules'];
        if (options.globalModules === undefined)
            options.globalModules = {};

        // if (options.allowCircular === undefined) options.allowCircular = false;
        if (options.varPrefix === undefined)
            options.varPrefix = '__small$_';

        this.options = options;

        this.startFileName = startFileName;

        var i = 0;
        for (var name in options.globalModules) {
            if (!Object.prototype.hasOwnProperty.call(options.globalModules, name))
                continue;

            options.globalModules[name]._varName = options.varPrefix + 'mod_' + i;
            i++;
        }
    }
    Project.prototype.start = function () {
        this.startFile = this.addFile(this.startFileName);
    };

    Project.prototype.addFile = function (filename) {
        var _this = this;
        var f = new file.SourceFile(filename);
        f.id = this.files.length;
        f.varName = this.options.varPrefix + f.id;

        this._fileQueue++;
        this.files.push(f);

        this.io.readFile(filename).then(function (source) {
            if (_this.failed)
                return;

            f.file = source;

            f.parse(source.contents.toString('utf8'));

            f.analyse();

            _this.resolveFile(f, function (err) {
                if (err) {
                    _this.emit('error', err);
                } else {
                    _this._fileQueue--;
                    if (_this._fileQueue === 0) {
                        _this.emit('read');
                        _this.setAllDependencies();
                        _this.generateOrder();
                        _this.generateStructure();
                        _this.importSetOuputStyles();
                        _this.rewrite();
                        _this.bundle();
                        _this.writeOutput();
                    }
                }
            });
        }).catch(function (err) {
            _this.emit('error', err);
        });

        return f;
    };
    Project.prototype.getFile = function (filename) {
        for (var i = 0; i < this.files.length; ++i) {
            if (this.files[i].filename === filename) {
                return this.files[i];
            }
        }
        return undefined;
    };
    Project.prototype.getOrAddFile = function (filename) {
        var f = this.getFile(filename);

        if (f) {
            return f;
        } else {
            return this.addFile(filename);
        }
    };

    Project.prototype.resolveFile = function (f, callback) {
        var _this = this;
        var imports = f.importNodes;

        if (imports.length === 0) {
            process.nextTick(function () {
                callback(undefined);
            });
            return;
        }

        var queue = 0;
        var done = false;

        imports.forEach(function (imp, i) {
            if (Object.prototype.hasOwnProperty.call(_this.options.globalModules, imp.relativePath)) {
                imp.globalModule = _this.options.globalModules[imp.relativePath];
            } else {
                queue++;

                _this.resolveSingle(f, imp.relativePath).then(function (path) {
                    imp.absolutePath = path;
                    imp.file = _this.getOrAddFile(imp.absolutePath);

                    if (f.dependencies.indexOf(imp.file) === -1) {
                        f.dependencies.push(imp.file);
                        imp.file.dependants.push(f);
                    }
                    imp.file.dependantImports.push(imp);

                    queue--;

                    if (queue === 0) {
                        f.unhandledDependencies = [].concat(f.dependencies);
                        callback(undefined);
                        done = true;
                    }
                }).catch(function (err) {
                    _this.failed = true;
                    f.failed = true;
                    done = true;
                    callback(err);
                });
            }
        });

        if (queue === 0 && !done) {
            callback(undefined);
        }
    };
    Project.prototype.resolveSingle = function (f, str) {
        return resolve.resolve(this, f.file, str);
    };
    Project.prototype.setAllDependencies = function () {
        this.files.forEach(function (file) {
            file.setAllDependencies();
        });
    };
    Project.prototype.generateOrder = function () {
        order.generateOrder(this);
        this.emit('generatedOrder');
    };
    Project.prototype.generateStructure = function () {
        structure.generateStructure(this);
        this.emit('generatedStructure');
    };
    Project.prototype.importSetOuputStyles = function () {
        this.orderFiles.forEach(function (f) {
            f.importNodes.forEach(function (imp) {
                if (imp.globalModule) {
                    imp.outputStyle = 2 /* VAR_REFERENCE */;
                    if (imp.file)
                        imp.file.defined = true;
                    return;
                }

                if (imp.file.dependantImports.length === 1) {
                    imp.outputStyle = 0 /* SINGLE */;
                    imp.file.defined = true;
                    return;
                }

                // TODO: Check whether it is secure to use VAR_ASSIGN or VAR_ASSIGN_AND_RENAME
                /* if (imp.file.structureParent === f) {
                if (f.importNodes.filter((item) => {
                return item.file === imp.file;
                })[0] === imp) {
                imp.outputStyle = (imp instanceof importNode.SimpleImport) ? importNode.OutputStyle.VAR_ASSIGN_AND_RENAME : importNode.OutputStyle.VAR_ASSIGN;
                imp.file.defined = true;
                return;
                }
                } */
                if (imp instanceof importNode.SimpleImport && imp.safe && imp.dotArray.length === 0) {
                    imp.outputStyle = 3 /* VAR_RENAME */;
                    return;
                }

                imp.outputStyle = 2 /* VAR_REFERENCE */;
            });
        });
    };
    Project.prototype.rewrite = function () {
        var _this = this;
        this.files.forEach(function (f) {
            rewrite.rewriteFile(_this, f);
        });
        this.emit('rewritten');
    };
    Project.prototype.bundle = function () {
        var _this = this;
        // Convert Dictionary to Array
        var globalModules = Object.keys(this.options.globalModules).map(function (key) {
            return _this.options.globalModules[key];
        });

        var compiled = bundle.bundleFile(this, this.startFile, false, globalModules.map(function (mod) {
            return mod._varName;
        }));

        var standaloneDeps = globalModules.map(function (mod) {
            return mod.standalone || mod.universal;
        }).join(', ');
        var amdDeps = globalModules.map(function (mod) {
            return JSON.stringify(mod.amd || mod.universal);
        }).join(', ');
        var commonjsDeps = globalModules.map(function (mod) {
            return 'require(' + JSON.stringify(mod.amd || mod.universal) + ')';
        }).join(', ');

        if (!this.options.exportPackage)
            this.options.exportPackage = {};

        if (this.options.exportPackage.standalone !== undefined) {
            this.compiled.standalone = this.options.exportPackage.standalone + ' = ' + compiled + '(' + standaloneDeps + ');';

            if (this.options.exportPackage.standalone.indexOf('.') === -1) {
                this.compiled.standalone = 'var ' + this.compiled.standalone;
            }
        } else {
            this.compiled.standalone = compiled + '(' + standaloneDeps + ');';
        }

        if (this.options.exportPackage.amd === undefined || this.options.exportPackage.amd === '') {
            this.compiled.amd = 'define([' + amdDeps + '], ' + compiled + ');';
        } else {
            this.compiled.amd = 'define(' + JSON.stringify(this.options.exportPackage.amd) + ', [' + amdDeps + '], ' + compiled + ');';
        }

        this.compiled.commonjs = 'module.exports = ' + compiled + '(' + commonjsDeps + ');';

        if (this.options.exportPackage.universal !== undefined) {
            var universalAMD = this.options.exportPackage.universal;
            var universalCommonjs = this.options.exportPackage.universal;
            var universalStandalone = this.options.exportPackage.universal;

            if (this.options.exportPackage.universal === '') {
                universalAMD = this.options.exportPackage.amd;
                universalCommonjs = this.options.exportPackage.commonjs;
                universalStandalone = this.options.exportPackage.standalone;
            }

            this.compiled.universal = '(function(__root, __factory) { if (typeof define === "function" && define.amd) { ' + 'define(' + JSON.stringify(universalAMD) + ', [' + amdDeps + '], __factory);' + '} else if (typeof exports === "object") {' + 'module.exports = __factory(' + commonjsDeps + ');' + '} else {' + '__root[' + JSON.stringify(universalStandalone) + '] = __factory(' + standaloneDeps + ');' + '}' + '})(this, ' + compiled + ')';
        } else {
            this.compiled.universal = '(function(__root, __factory) { if (typeof define === "function" && define.amd) { ' + 'define([' + amdDeps + '], __factory);' + '} else if (typeof exports === "object") {' + '__factory(' + commonjsDeps + ');' + '} else {' + '__factory(' + standaloneDeps + ');' + '}' + '})(this, ' + compiled + ')';
        }
        this.emit('bundled');
    };
    Project.prototype.writeOutput = function () {
        var _this = this;
        if (this.options.outputFileName === undefined || this.options.outputFileName === null)
            return;

        var queue = 0;

        var output = function (filename, content) {
            var file = new Vinyl({
                path: filename,
                cwd: _this.startFile.file.cwd,
                contents: new Buffer(content)
            });

            queue++;

            _this.io.writeFile(file).then(function () {
                queue--;

                process.nextTick(function () {
                    if (queue === 0)
                        _this.emit('written');
                });
            }).catch(function (err) {
                _this.emit('error', err);
            });
        };

        if (this.options.outputFileName.amd) {
            output(this.options.outputFileName.amd, this.compiled.amd);
        }
        if (this.options.outputFileName.commonjs) {
            output(this.options.outputFileName.commonjs, this.compiled.commonjs);
        }
        if (this.options.outputFileName.standalone) {
            output(this.options.outputFileName.standalone, this.compiled.standalone);
        }
        if (this.options.outputFileName.universal) {
            output(this.options.outputFileName.universal, this.compiled.universal);
        }
    };
    return Project;
})(events.EventEmitter);
exports.Project = Project;
