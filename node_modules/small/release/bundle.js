function bundleFile(p, f, includeFunctionCall, parameters) {
    if (typeof includeFunctionCall === "undefined") { includeFunctionCall = true; }
    if (typeof parameters === "undefined") { parameters = []; }
    if (f.compiled)
        return f.compiled;

    var compiled = f.source;
    var replaces = f.rewriteData.replaces;

    parameters = f.rewriteData.closureParameters.map(function (param) {
        return param.name;
    }).concat(parameters);

    replaces.forEach(function (replace) {
        if (replace.value) {
            compiled = replaceRange(f, compiled, replace.pos, replace.endpos, replace.value);
        } else if (replace.file) {
            compiled = replaceRange(f, compiled, replace.pos, replace.endpos, replace.beforeFile + exports.bundleFile(p, replace.file) + replace.afterFile);
        } else {
            compiled = replaceRange(f, compiled, replace.pos, replace.endpos, '');
        }
    });

    f.compiled = '(function(' + parameters.join(', ') + ') {\n' + f.rewriteData.top + '\n' + compiled + '\n' + f.rewriteData.bottom + '\n})' + (includeFunctionCall ? '(' + exports.getClosureParameterValues(p, f) + ')' : '');

    return f.compiled;
}
exports.bundleFile = bundleFile;

function getClosureParameterValues(p, f) {
    return f.rewriteData.closureParameters.map(function (param) {
        return param.value;
    }).join(', ');
}
exports.getClosureParameterValues = getClosureParameterValues;

function replaceRange(f, str, start, end, substitute) {
    return str.substring(0, start) + substitute + str.substring(end);
}
