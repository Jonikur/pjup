function generateOrder(proj) {
    var unhandledFiles = [].concat(proj.files);

    var prev;
    var nextPrev;
    var deleteIndex;
    var ok;

    var index = 0;

    while (unhandledFiles.length !== 0) {
        ok = false;

        for (var i = 0; i < unhandledFiles.length; ++i) {
            var f = unhandledFiles[i];

            // Remove previous file from unhandled dependencies.
            var ind = f.unhandledDependencies.indexOf(prev);
            if (ind !== -1)
                f.unhandledDependencies.splice(ind, 1);

            // If there are no unhandledDependencies
            if (!ok && f.unhandledDependencies.length === 0) {
                ok = true;
                deleteIndex = i;
                nextPrev = f;
                f.orderIndex = index++;
                proj.orderFiles.push(f);
            }
        }

        prev = nextPrev;

        if (ok) {
            unhandledFiles.splice(deleteIndex, 1);
        } else {
            // Circular dependencies
            // TODO: Implement circular dependencies
            proj.emit('error', Error('Circular dependencies are not yet supported'));
            proj.failed = true;
            return;
        }
    }
}
exports.generateOrder = generateOrder;
