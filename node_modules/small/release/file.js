/// <reference path="../definitions/ref.d.ts" />
var uglify = require('uglify-js');
var exportNode = require('./exportNode');
var importNode = require('./importNode');
var astWalker = require('./astWalker');
var combine = require('./combine');

var SourceFile = (function () {
    function SourceFile(filename) {
        this.failed = false;
        this.exportNodes = [];
        this.importNodes = [];
        this.dependencies = [];
        this.dependants = [];
        this.dependantImports = [];
        this.unhandledDependencies = [];
        this.conditional = undefined;
        this.structureParent = undefined;
        this.structureChildren = [];
        /**
        * Children and children of children (of children ...)
        */
        this.structureAllChildren = [];
        /**
        * Dependencies and dependencies of children (of children ...)
        */
        this.structureDependencies = [];
        this.structureLevel = undefined;
        this.defined = false;
        this.filename = filename;
    }
    SourceFile.prototype.parse = function (source) {
        this.source = source;
        this.ast = uglify.parse(this.source, {
            filename: this.filename
        });
        this.ast.figure_out_scope();
    };

    SourceFile.prototype.analyse = function () {
        astWalker.walkAst(this);
        combine.combine(this);
    };

    SourceFile.prototype.getSingleExportNodes = function () {
        var result = [];
        for (var i = 0; i < this.exportNodes.length; ++i) {
            if (this.exportNodes[i] instanceof exportNode.SingleExport) {
                result.push(this.exportNodes[i]);
            }
        }
        return result;
    };
    SourceFile.prototype.getFullExportNodes = function () {
        var result = [];
        for (var i = 0; i < this.exportNodes.length; ++i) {
            if (this.exportNodes[i] instanceof exportNode.FullExport) {
                result.push(this.exportNodes[i]);
            }
        }
        return result;
    };
    SourceFile.prototype.getUnknownExportNodes = function () {
        var result = [];
        for (var i = 0; i < this.exportNodes.length; ++i) {
            if (this.exportNodes[i] instanceof exportNode.UnknownExport) {
                result.push(this.exportNodes[i]);
            }
        }
        return result;
    };

    SourceFile.prototype.getSimpleImportNodes = function () {
        var result = [];
        for (var i = 0; i < this.importNodes.length; ++i) {
            if (this.importNodes[i] instanceof importNode.SimpleImport) {
                result.push(this.importNodes[i]);
            }
        }
        return result;
    };

    SourceFile.prototype.setAllDependencies = function () {
        var _this = this;
        this.allDependencies = [];
        var helper = function (other) {
            other.dependencies.forEach(function (dependency) {
                if (_this.allDependencies.indexOf(dependency) === -1) {
                    _this.allDependencies.push(dependency);
                    helper(dependency);
                }
            });
        };

        helper(this);
    };
    return SourceFile;
})();
exports.SourceFile = SourceFile;
